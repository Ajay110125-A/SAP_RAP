managed; //implementation in class zbp_i_travel_ay_m unique;
strict ( 2 );

define behavior for ZI_TRAVEL_AY_M //alias <alias_name>
implementation in class zcl_bp_travel_ay_m unique
persistent table zay_travel_m
lock master
authorization master ( instance )
etag master LastChangedAt
early numbering
{
  action ( features : instance ) acceptTravel result [1] $self;
  action ( features : instance ) rejectTravel result [1] $self;
  factory action copyTravel [1];
  internal action reCalTotalPrice;
  create;
  update;
  delete;
  field ( readonly ) TravelId, CreatedAt, CreatedBy, LastChangedAt, LastChangedBy;
  field ( mandatory ) AgencyId, CustomerId, BeginDate, EndDate, OverallStatus, BookingFee, CurrencyCode;
  association _Booking { create ( features : instance ); }

  mapping for zay_travel_m
    {
      TravelId      = travel_id;
      AgencyId      = agency_id;
      CustomerId    = customer_id;
      BeginDate     = begin_date;
      EndDate       = end_date;
      BookingFee    = booking_fee;
      TotalPrice    = total_price;
      CurrencyCode  = currency_code;
      Description   = description;
      OverallStatus = overall_status;
      CreatedBy     = created_by;
      CreatedAt     = created_at;
      LastChangedBy = last_changed_by;
      LastChangedAt = last_changed_at;
    }
  validation validateCustomer on save { create; field CustomerId; }
  validation validateDates on save { create; field BeginDate, EndDate; }
  validation validateStatus on save { create; field OverallStatus; }
  validation validateBookingFee on save { create; field BookingFee; }
  validation validateCurrencyCode on save { create; field CurrencyCode; }
}

define behavior for ZI_BOOKING_AY_M //alias <alias_name>
implementation in class zcl_bp_booking_ay_m unique
persistent table zay_booking_m
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
//etag dependent by _Travel -> If you want to use Etag field from Parent, because we have same kind of field in Child so we use that as Etag.
//It will show error if child have same name field as parent in dependent etag
early numbering
{
  update;
  delete;
  field ( readonly ) TravelId, BookingId, LastChangedAt;
  field ( mandatory ) CarrierId, ConnectionId, FlightDate, BookingStatus;
  field ( mandatory : create, readonly : update ) BookingDate, CustomerId;
  association _Travel;
  association _BookingSuppl { create ( features : instance ); }


  mapping for zay_booking_m
    {
      TravelId      = travel_id;
      BookingId     = booking_id;
      BookingDate   = booking_date;
      CustomerId    = customer_id;
      CarrierId     = carrier_id;
      ConnectionId  = connection_id;
      FlightDate    = flight_date;
      FlightPrice   = flight_price;
      CurrencyCode  = currency_code;
      BookingStatus = booking_status;
      LastChangedAt = last_changed_at;
    }

  validation validateStatus on save { create; field BookingStatus; }
  validation validateCustomer on save { create; field CustomerId; }
  validation validateCurrencyCode on save { create; field CurrencyCode; }
  validation validateConnection on save { create; field ConnectionId; }
  validation validateFlightPrice on save { create; field FlightPrice; }

}

define behavior for ZI_BOOKSUPP_AY_M //alias <alias_name>
implementation in class zcl_bp_booksuppl_ay_m unique
persistent table zay_booksupp_m
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
early numbering
{
  update;
  delete;
  field ( readonly ) TravelId, BookingId, BookingSupplimentId, LastChangedAt;
  field ( mandatory ) Price, SupplimentId;
  association _Travel;
  association _Booking;

  mapping for zay_booksupp_m
    {
      TravelId            = travel_id;
      BookingId           = booking_id;
      BookingSupplimentId = booking_suppliment_id;
      SupplimentId        = suppliment_id;
      Price               = price;
      CurrencyCode        = currency_code;
      LastChangedAt       = last_changed_at;
    }

  validation validateCurrencyCode on save { create; field CurrencyCode; }
  validation validateSupplement on save { create; field SupplimentId; }
  validation validatePrice on save { create; field Price; }
}